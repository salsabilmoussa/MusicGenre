pipeline {
    agent any

    environment {
        GIT_REPO = 'https://github.com/salsabilmoussa/MusicGenre.git'
        GIT_CREDENTIALS_ID = 'github_token'
        DOCKER_HUB_CREDENTIALS_ID = 'dockerhub_credentials'
        DOCKER_IMAGE_SVM = "svm-microservice_image"
        DOCKER_IMAGE_VGG = "vgg-microservice_image"
        DOCKER_IMAGE_FRONTEND = "frontend_image"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'chifa', credentialsId: "${GIT_CREDENTIALS_ID}", url: "${GIT_REPO}"
            }
        }
        
        stage('Build Docker Images') {
            steps {
                script {
                    // Utiliser un chemin absolu pour la construction des images Docker
                    def workspace = pwd() // Récupérer le répertoire de travail actuel
                    
                    // Les chemins relatifs à partir de Jenkins/ vers les dossiers de services
                    docker.build(DOCKER_IMAGE_SVM, "${workspace}/../SVM-microservice")
                    docker.build(DOCKER_IMAGE_VGG, "${workspace}/../VGG-microservice")
                    docker.build(DOCKER_IMAGE_FRONTEND, "${workspace}/../frontend")
                }
            }
        }

        stage('Run Docker Compose') {
            steps {
                script {
                    // Start Docker Compose for all services
                    sh 'docker-compose -f ../docker-compose.yaml up -d'
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    // Run automated tests for each service using docker-compose
                    sh 'docker-compose exec -T svm-microservice pytest Jenkins/svm_tests.py'
                    sh 'docker-compose exec -T vgg19-microservice pytest Jenkins/vgg19_tests.py'
                    sh 'docker-compose exec -T frontend pytest Jenkins/frontend_tests.py'
                }
            }
        }

        stage('Stop Services') {
            steps {
                script {
                    // Stop all containers after tests
                    sh 'docker-compose down'
                }
            }
        }
    }

    post {
        success {
            echo 'Build and tests successful!'
        }
        failure {
            echo 'Build or tests failed!'
        }
    }
}
