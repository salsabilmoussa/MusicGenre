pipeline {
    agent any

    environment {
        GIT_REPO = 'https://github.com/salsabilmoussa/MusicGenre.git'
        GIT_CREDENTIALS_ID = 'github_token'
        DOCKER_HUB_CREDENTIALS_ID = 'dockerhub_credentials'
        DOCKER_IMAGE_SVM = "svm-microservice-1"
        DOCKER_IMAGE_VGG = "vgg-microservice-1"
        DOCKER_IMAGE_FRONTEND = "frontend-1"
        WORKSPACE_PATH = 'C:/Users/Chifa/Desktop/projet/MusicGenre'  // Ajouter cette ligne pour définir le chemin de votre workspace
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'chifa', credentialsId: "${GIT_CREDENTIALS_ID}", url: "${GIT_REPO}"
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    // Utiliser un chemin absolu pour chaque service
                    docker.build(DOCKER_IMAGE_SVM, "${WORKSPACE_PATH}/SVM-microservice")
                    docker.build(DOCKER_IMAGE_VGG, "${WORKSPACE_PATH}/VGG-microservice")
                    docker.build(DOCKER_IMAGE_FRONTEND, "${WORKSPACE_PATH}/frontend/music-genre")
                }
            }
        }

        stage('Run Docker Compose') {
            steps {
                script {
                    // Démarrer Docker Compose pour tous les services en utilisant un chemin absolu
                    bat "docker-compose -f ${WORKSPACE_PATH}/docker-compose.yaml up -d"
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    // Lancer les tests automatisés pour chaque service via docker-compose
                    bat "docker-compose exec -T svm-microservice pytest ${WORKSPACE_PATH}/Jenkins/svm_tests.py"
                    bat "docker-compose exec -T vgg19-microservice pytest ${WORKSPACE_PATH}/Jenkins/vgg19_tests.py"
                    bat "docker-compose exec -T frontend pytest ${WORKSPACE_PATH}/Jenkins/frontend_tests.py"
                }
            }
        }

        stage('Stop Services') {
            steps {
                script {
                    // Arrêter tous les conteneurs après les tests
                    bat "docker-compose down"
                }
            }
        }
    }

    post {
        success {
            echo 'Build and tests successful!'
        }
        failure {
            echo 'Build or tests failed!'
        }
    }
}
