pipeline {
    agent any
    environment {
        DOCKER_IMAGE_SVM = "svm_service_image"
        DOCKER_IMAGE_VGG = "vgg19_service_image"
        DOCKER_IMAGE_FRONTEND = "frontend_image"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
       stage('Clone') {
            steps {
                // Clone the specific branch
                git branch: 'chifa', url: 'https://github.com/salsabilmoussa/MusicGenre.git'
            }
        }
        stage('Build Docker Images') {
            steps {
                script {
                    // Build Docker images for SVM service
                    docker.build(DOCKER_IMAGE_SVM, '../SVM_service/Dockerfile')

                    // Build Docker images for VGG19 service
                    docker.build(DOCKER_IMAGE_VGG, '../VGG19_service/Dockerfile')

                    // Build Docker image for the frontend
                    docker.build(DOCKER_IMAGE_FRONTEND, '../frontend/Dockerfile')
                }
            }
        }
        stage('Run Docker Compose') {
            steps {
                script {
                    // Start Docker Compose for all services
                    sh 'docker-compose -f ../docker-compose.yaml up -d'
                }
            }
        }
        stage('Run Tests') {
            steps {
                script {
                    // Run automated tests for each service
                    sh 'docker exec -t svm_service_container pytest Jenkins/svm_tests.py'
                    sh 'docker exec -t vgg19_service_container pytest Jenkins/vgg19_tests.py'
                    sh 'docker exec -t frontend_container pytest Jenkins/frontend_tests.py'
                }
            }
        }
        stage('Stop Services') {
            steps {
                script {
                    // Stop all containers after tests
                    sh 'docker-compose down'
                }
            }
        }
    }
    post {
        success {
            echo 'Build and tests successful!'
        }
        failure {
            echo 'Build or tests failed!'
        }
    }
}